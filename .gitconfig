[alias]
	ac = !git add -A && git commit
	s = !git status
	rb = "!f() { branch=$(git reflog show --pretty=format:'%gs ~ %gd' --date=relative | grep 'checkout:' | grep -oE '[^ ]+ ~ .*' | awk -F~ '!seen[$1]++' | head -n 20 | awk -F' ~ HEAD@{' '{printf(\"%s (%s)\\n\", $1, substr($2, 1, length($2)-1))}' | gum choose) && git checkout $(echo $branch | awk '{print $1}'); }; f"
	    deploy = "!f() { \
        echo -n 'Are you sure you want to deploy staging to main branch? (y/N): ' && \
        read answer && \
        if [ \"$answer\" = \"y\" ] || [ \"$answer\" = \"Y\" ]; then \
            git checkout staging && \
            git pull && \
            git checkout main && \
            git merge staging && \
            git push origin main && \
            git checkout staging; \
        else \
            echo 'Deploy cancelled'; \
        fi; \
    }; f"
	wip = "!f() { \
        git add . && \
        git commit -m \"WIP: $(date '+%Y-%m-%d %H:%M:%S')\"; \
    }; f"
	acp = "!f() { \n  git add .; \n  DIFF=$(git diff --cached); \n  if [ -z \"$DIFF\" ]; then \n    echo \"No changes to commit\"; \n    return 1; \n  fi; \n  MESSAGE=$(echo \"$DIFF\" | llm -s \"Generate a concise git commit message based on these changes. The commit message should be structured as follows:\n\n<type>[optional scope]: <description>\n\n[optional body]\n\n[optional footer(s)]\n\nWhere type is one of: feat, fix, docs, style, refactor, perf, test, build, ci, chore.\nKeep the description under 50 characters. Be specific and use present tense.\"); \n  if [ -z \"$MESSAGE\" ]; then \n    echo \"Failed to generate commit message.\"; \n    read -p \"Enter commit message manually: \" MESSAGE; \n  fi; \n  git commit -m \"$MESSAGE\" && git push; \n}; f"
	cs = "!f() { \n  DIFF=$(git diff --cached); \n  if [ -z \"$DIFF\" ]; then \n    echo \"No changes to commit\"; \n    return 1; \n  fi; \n  SYSTEM_PROMPT=$(cat ~/code/bin/conventional-commit.md);\n  RESPONSE=$(llm --system \"$SYSTEM_PROMPT\" \"$DIFF\");\n  \n  # Clean the response - handle multiline code blocks\n  CLEANED_RESPONSE=$(echo \"$RESPONSE\" | sed -e \"/^\\`\\`\\`/d\" -e \"/^\\`\\`\\`$/d\");\n  MESSAGE=$(echo \"$CLEANED_RESPONSE\" | head -1 | tr -d \"\\r\");\n  DESCRIPTION=$(echo \"$CLEANED_RESPONSE\" | tail -n +2);\n  \n  if [ -z \"$MESSAGE\" ]; then \n    echo \"Failed to generate commit message.\"; \n    read -p \"Enter commit message manually: \" MESSAGE; \n  fi; \n  if [ -z \"$DESCRIPTION\" ]; then\n    git commit -m \"$MESSAGE\"; \n  else\n    git commit -m \"$MESSAGE\" -m \"$DESCRIPTION\";\n  fi;\n}; f"
	cp = "!f() { \
        DIFF=$(git diff --cached); \
        if [ -z "$DIFF" ]; then \
            echo "No changes staged for commit"; \
            return 1; \
        fi; \
        MESSAGE=$(echo "$DIFF" | llm -s "Generate a concise git commit message based on these changes. The commit message should be structured as follows:\n\n<type>[optional scope]: <description>\n\n[optional body]\n\n[optional footer(s)]\n\nWhere type is one of: feat, fix, docs, style, refactor, perf, test, build, ci, chore.\nKeep the description under 50 characters. Be specific and use present tense."); \
        if [ -z "$MESSAGE" ]; then \
            echo "Failed to generate commit message."; \
            read -p "Enter commit message manually: " MESSAGE; \
        fi; \
        git commit -m "$MESSAGE" && git push; \
    }; f"
[push]
	default = current
[pull]
	default = current
[user]
	name = Cole Striler
	email = colestriler@gmail.com
